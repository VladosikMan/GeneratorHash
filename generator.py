import threading
import time
from random import randint
from datetime import datetime

data = []
que_var = 9

def init_data():
    #считать данные для генерации
    data1 = [line.strip() for line in open("data/data1.txt", 'r')]
    data2 = [line.strip() for line in open("data/data2.txt", 'r')]
    data.append(data1)
    data.append(data2)
    

my_thread = threading.Thread(target=init_data)
my_thread.start()


def get_data():
    return data
def get_var_str(x):
    
    if x == 1 :
        return "Реализовать алгоритм криптографической функции – SHA1. На входе сообщение произвольный длины.Размер хеша – 160 бит. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период.\nНазвать отличие от остальных SHA алгоритмов"

    if x == 2 :
        return "Реализовать алгоритм криптографической функции – SH224. На входе сообщение произвольный длины.Размер хеша – 224 бита. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период.\nНазвать отличие от остальных SHA алгоритмов"

    if x == 3 :
        return "Реализовать алгоритм криптографической функции – SHA256. На входе сообщение произвольный длины.Размер хеша – 256 бит. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период.\nНазвать отличие от остальных SHA алгоритмов"

    if x == 4 :
        return "Реализовать алгоритм криптографической функции – SHA384. На входе сообщение произвольный длины.Размер хеша – 384 бит. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период.\nНазвать отличие от остальных SHA алгоритмов"

    if x == 5 :
        return "Реализовать алгоритм криптографической функции – SHA512. На входе сообщение произвольный длины.Размер хеша – 512 бит. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период.\nНазвать отличие от остальных SHA алгоритмов"

    if x == 6 :
        return "Реализовать алгоритм криптографической функции – MD5. На входе сообщение произвольный длины.Размер хеша – 128 бит. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период.\nНазвать отличие от остальных MD алгоритмов"

    if x == 7 :
        return "Реализовать алгоритм криптографической функции – Whirlpool. На входе сообщение произвольный длины.Размер хеша – 512 бит. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период."

    if x == 8 :
        
        return "Реализовать алгоритм криптографической функции – ripemd160. На входе сообщение произвольный длины.Размер хеша – 160 бит. Оценить быстродействие по сравнению с другими хэш-функциями, разработанными в тот период."

    if x == 9 :
        return "Реализовать алгоритмы криптографических функций – adler32 и crc32. На входе сообщение произвольный длины.Размер хеша – 32 бита. Сравнить алгоритмы друг с другом."
        


    
def gener_variants(size):
    s = "Варианты - " + str(size) + "\n" + "\n"
    len_rus = len(data[0])
    len_en =  len(data[1])


    i = 0
    while(i<size):
        s += "Задание 4. Функция хеширования.\n"
        random_number = randint(1, que_var)
        s += get_var_str(random_number) + "\n"

        if random_number == 7 or random_number == 9:
            rand = randint(0, len_en-1)
            s += "Исходный текст для шифрования:'" + data[1][rand] + "'" + "\n"+ "\n"
        else:
            rand = randint(0, len_rus-1)
            s += "Исходный текст для шифрования:'" + data[0][rand] + "'" + "\n"+ "\n"
        
        i += 1

    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    d = dt_string.replace("/",".")
    d1 = d.replace(":","_")
    path = "data/Варианты - " + str(size) + " " + d1 + ".txt"
    
    text_file = open(path, "w")
    text_file.write(s)
    text_file.close()
    


